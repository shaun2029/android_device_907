From 9b67038d11d78d89ab2cd9724bbb7f84ae7f1989 Mon Sep 17 00:00:00 2001
From: dianlujitao <dianlujitao@gmail.com>
Date: Wed, 4 Jun 2014 22:17:17 +0800
Subject: [PATCH] system_core

Change-Id: I45356b81f7f67b5d922fc6409e8082e0fbd892ae

diff --git a/include/system/audio.h b/include/system/audio.h
index 667fe41..cf41b78 100644
--- a/include/system/audio.h
+++ b/include/system/audio.h
@@ -82,6 +82,7 @@ typedef enum {
                                           /*  play the mix captured by this audio source.      */
     AUDIO_SOURCE_FM_RX               = 9,
     AUDIO_SOURCE_FM_RX_A2DP          = 10,
+    AUDIO_SOURCE_AF                  = 11,/* Allwinner */
     AUDIO_SOURCE_CNT,
     AUDIO_SOURCE_MAX                 = AUDIO_SOURCE_CNT - 1,
     AUDIO_SOURCE_HOTWORD             = 1999, /* A low-priority, preemptible audio source for
@@ -477,6 +478,7 @@ enum {
     AUDIO_DEVICE_IN_USB_DEVICE            = AUDIO_DEVICE_BIT_IN * 0x1000,
     AUDIO_DEVICE_IN_ANC_HEADSET           = AUDIO_DEVICE_BIT_IN | 0x2000,
     AUDIO_DEVICE_IN_PROXY                 = AUDIO_DEVICE_BIT_IN | 0x4000,
+    AUDIO_DEVICE_IN_AF                    = AUDIO_DEVICE_BIT_IN | 0x1000000,
     AUDIO_DEVICE_IN_DEFAULT               = AUDIO_DEVICE_IN_BUILTIN_MIC,
 #else
     AUDIO_DEVICE_IN_COMMUNICATION         = AUDIO_DEVICE_BIT_IN | 0x1,
@@ -501,6 +503,7 @@ enum {
     AUDIO_DEVICE_IN_FM_RX                 = AUDIO_DEVICE_BIT_IN | 0x8000,
     AUDIO_DEVICE_IN_FM_RX_A2DP            = AUDIO_DEVICE_BIT_IN | 0x10000,
 #endif
+    AUDIO_DEVICE_IN_AF                    = AUDIO_DEVICE_BIT_IN | 0x1000000,
     AUDIO_DEVICE_IN_DEFAULT               = AUDIO_DEVICE_BIT_IN | AUDIO_DEVICE_BIT_DEFAULT,
 #endif
 
@@ -517,6 +520,7 @@ enum {
                                AUDIO_DEVICE_IN_DGTL_DOCK_HEADSET |
                                AUDIO_DEVICE_IN_USB_ACCESSORY |
                                AUDIO_DEVICE_IN_USB_DEVICE |
+                               AUDIO_DEVICE_IN_AF |
                                AUDIO_DEVICE_IN_PROXY |
                                AUDIO_DEVICE_IN_ANC_HEADSET |
 #ifdef MTK_HARDWARE
diff --git a/include/system/camera.h b/include/system/camera.h
index 9cc8286..8a87422 100644
--- a/include/system/camera.h
+++ b/include/system/camera.h
@@ -168,6 +168,10 @@ enum {
      * Stop the face detection.
      */
     CAMERA_CMD_STOP_FACE_DETECTION = 7,
+    
+  // add command
+  CAMERA_CMD_SET_SCREEN_ID = 0xFF000000,
+  CAMERA_CMD_SET_CEDARX_RECORDER = 0xFF000001,
 
 #if defined(QCOM_ICS_COMPAT) && defined(QCOM_HARDWARE)
     CAMERA_CMD_HISTOGRAM_ON     = 8,
diff --git a/init/init.h b/init/init.h
index db94c29..45ece9b 100644
--- a/init/init.h
+++ b/init/init.h
@@ -139,6 +139,7 @@ void property_changed(const char *name, const char *value);
 #define INIT_IMAGE_FILE	"/initlogo.rle"
 
 int load_565rle_image( char *file_name );
+int load_argb8888_image(char *fn);
 #endif
 
 extern struct selabel_handle *sehandle;
diff --git a/init/logo.c b/init/logo.c
index 614224c..d20294f 100644
--- a/init/logo.c
+++ b/init/logo.c
@@ -49,7 +49,8 @@ struct FB {
 
 #define fb_width(fb) ((fb)->vi.xres)
 #define fb_height(fb) ((fb)->vi.yres)
-#define fb_size(fb) ((fb)->vi.xres * (fb)->vi.yres * 2)
+#define fb_size(fb) ((fb)->vi.xres * (fb)->vi.yres * 4)
+//#define fb_size(fb) ((fb)->vi.xres * (fb)->vi.yres * 2)
 
 static int fb_open(struct FB *fb)
 {
@@ -161,3 +162,101 @@ fail_restore_text:
     return -1;
 }
 
+ int load_argb8888_image(char *fn)
+{
+    struct FB fb;
+    struct stat s;
+    unsigned long *data, *bits, *ptr;
+    unsigned long *lineptr;
+    unsigned long width;
+    unsigned long height;
+    unsigned long countw = 0;
+    unsigned long counth = 0;
+    unsigned long *linebits;
+    unsigned long fbsize;
+    int fd;
+
+    if (vt_set_mode(1)) 
+        return -1;
+
+    fd = open(fn, O_RDONLY);
+    if (fd < 0) {
+        ERROR("cannot open '%s'\n", fn);
+        goto fail_restore_text;
+    }
+
+    if (fstat(fd, &s) < 0) 
+    {
+        ERROR("fstat failed!\n");
+        goto fail_close_file;
+    }
+
+    data = mmap(0, s.st_size, PROT_READ, MAP_SHARED, fd, 0);
+    if (data == MAP_FAILED)
+    {
+        ERROR("MMAP failed!\n");
+        goto fail_close_file;
+    }
+
+    if (fb_open(&fb))
+    {
+        ERROR("FB_OPEN failed!\n");
+        goto fail_unmap_data;
+    }
+
+    width       = fb_width(&fb);
+    height      = fb_height(&fb);
+
+    fbsize      = width * height * 4;
+    ERROR("width = %d\n",width);
+    ERROR("height = %d\n",height);
+        ERROR("s.st_size = %d\n",s.st_size);
+    
+    if(fbsize != s.st_size)
+    {
+        ERROR("logo match failed!fbsize = %d\n",fbsize);
+
+        munmap(data, s.st_size);
+        fb_update(&fb);
+        fb_close(&fb);
+        close(fd);
+
+        return -1;
+    }
+    
+    counth      = height;
+    linebits    = fb.bits;
+    lineptr     = data;
+
+    while (counth > 0) 
+    {
+        bits    = linebits;
+        ptr     = lineptr;
+        countw  = width;
+        while(countw > 0)
+        {
+            *bits = *ptr;
+            ptr++;
+            bits++;
+            countw--;
+        }
+        linebits    += width;
+        lineptr     += width;
+        counth--;
+    }
+
+    munmap(data, s.st_size);
+    fb_update(&fb);
+    fb_close(&fb);
+    close(fd);
+    //unlink(fn);
+    return 0;
+
+fail_unmap_data:
+    munmap(data, s.st_size);    
+fail_close_file:
+    close(fd);
+fail_restore_text:
+    vt_set_mode(0);
+    return -1;
+}
diff --git a/libsuspend/autosuspend.c b/libsuspend/autosuspend.c
index eb1f66e..62473ce 100644
--- a/libsuspend/autosuspend.c
+++ b/libsuspend/autosuspend.c
@@ -107,3 +107,27 @@ int autosuspend_disable(void)
     autosuspend_enabled = false;
     return 0;
 }
+
+int autosuspend_bootfast(void)
+{
+    int ret;
+
+    ret = autosuspend_init();
+    if (ret) {
+        return ret;
+    }
+
+    ALOGV("autosuspend_enable\n");
+
+    if (autosuspend_enabled) {
+        return 0;
+    }
+
+    ret = autosuspend_ops->bootfast();
+    if (ret) {
+        return ret;
+    }
+
+    autosuspend_enabled = true;
+    return 0;
+}
diff --git a/libsuspend/autosuspend_autosleep.c b/libsuspend/autosuspend_autosleep.c
index 5451615..3765a3f 100644
--- a/libsuspend/autosuspend_autosleep.c
+++ b/libsuspend/autosuspend_autosleep.c
@@ -77,9 +77,16 @@ err:
     return ret;
 }
 
+static int autosuspend_autosleep_bootfast(void)
+{
+  ALOGV("not support\n");
+  return 0;
+}
+
 struct autosuspend_ops autosuspend_autosleep_ops = {
         .enable = autosuspend_autosleep_enable,
         .disable = autosuspend_autosleep_disable,
+    .bootfast = autosuspend_autosleep_bootfast,
 };
 
 struct autosuspend_ops *autosuspend_autosleep_init(void)
diff --git a/libsuspend/autosuspend_earlysuspend.c b/libsuspend/autosuspend_earlysuspend.c
index 1df8c6a..39b6820 100644
--- a/libsuspend/autosuspend_earlysuspend.c
+++ b/libsuspend/autosuspend_earlysuspend.c
@@ -36,6 +36,7 @@
 static int sPowerStatefd;
 static const char *pwr_state_mem = "mem";
 static const char *pwr_state_on = "on";
+static const char *pwr_state_bootfast="bootfast";
 static pthread_t earlysuspend_thread;
 static pthread_mutex_t earlysuspend_mutex = PTHREAD_MUTEX_INITIALIZER;
 static pthread_cond_t earlysuspend_cond = PTHREAD_COND_INITIALIZER;
@@ -132,6 +133,28 @@ err:
     return ret;
 }
 
+static int autosuspend_earlysuspend_gotobootfast(void)
+{
+    char buf[80];
+    int ret;
+
+    ALOGV("autosuspend_earlysuspend_gotobootfast\n");
+  
+    ret = write(sPowerStatefd, pwr_state_bootfast, strlen(pwr_state_bootfast));
+    if (ret < 0) {
+        strerror_r(errno, buf, sizeof(buf));
+        ALOGE("Error writing to %s: %s\n", EARLYSUSPEND_SYS_POWER_STATE, buf);
+        goto err;
+    }
+
+    ALOGV("autosuspend_earlysuspend_gotobootfast done\n");
+
+    return 0;
+
+err:
+    return ret;
+}
+
 static int autosuspend_earlysuspend_disable(void)
 {
     char buf[80];
@@ -165,6 +188,7 @@ err:
 struct autosuspend_ops autosuspend_earlysuspend_ops = {
         .enable = autosuspend_earlysuspend_enable,
         .disable = autosuspend_earlysuspend_disable,
+    .bootfast = autosuspend_earlysuspend_gotobootfast,
 };
 
 void start_earlysuspend_thread(void)
diff --git a/libsuspend/autosuspend_ops.h b/libsuspend/autosuspend_ops.h
index 698e25b..2bcd3ff 100644
--- a/libsuspend/autosuspend_ops.h
+++ b/libsuspend/autosuspend_ops.h
@@ -20,6 +20,7 @@
 struct autosuspend_ops {
     int (*enable)(void);
     int (*disable)(void);
+  int (*bootfast)(void);
 };
 
 struct autosuspend_ops *autosuspend_autosleep_init(void);
diff --git a/libsuspend/autosuspend_wakeup_count.c b/libsuspend/autosuspend_wakeup_count.c
index a88e677..ded9692 100644
--- a/libsuspend/autosuspend_wakeup_count.c
+++ b/libsuspend/autosuspend_wakeup_count.c
@@ -130,10 +130,15 @@ static int autosuspend_wakeup_count_disable(void)
 
     return ret;
 }
-
+static int autosuspend_wakeup_count_bootfast(void)
+{
+  ALOGV("not support\n");
+  return 0;
+}
 struct autosuspend_ops autosuspend_wakeup_count_ops = {
         .enable = autosuspend_wakeup_count_enable,
         .disable = autosuspend_wakeup_count_disable,
+    .bootfast = autosuspend_wakeup_count_bootfast,
 };
 
 struct autosuspend_ops *autosuspend_wakeup_count_init(void)
diff --git a/libsuspend/include/suspend/autosuspend.h b/libsuspend/include/suspend/autosuspend.h
index f56fc6a..c9a8380 100644
--- a/libsuspend/include/suspend/autosuspend.h
+++ b/libsuspend/include/suspend/autosuspend.h
@@ -43,6 +43,8 @@ int autosuspend_enable(void);
  */
 int autosuspend_disable(void);
 
+int autosuspend_bootfast(void);
+
 __END_DECLS
 
 #endif
