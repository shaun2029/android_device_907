From e5e1f711f3a8d17424012a8bb039d21c0864b531
From: ugers <yugers@gmail.com>
Date: Fri Feb 27 22:53:06 2015 +0300
Subject: [PATCH] system_core

Change-Id: Ibe163969403d8e2466a45fbd7536235888243453

diff --git a/include/system/camera.h b/include/system/camera.h
index 9cc8286..e5e3b1e 100644
--- a/include/system/camera.h
+++ b/include/system/camera.h
@@ -87,22 +87,11 @@ enum {
     CAMERA_MSG_PREVIEW_METADATA = 0x0400, // dataCallback
     // Notify on autofocus start and stop. This is useful in continuous
     // autofocus - FOCUS_MODE_CONTINUOUS_VIDEO and FOCUS_MODE_CONTINUOUS_PICTURE.
-#if defined(QCOM_ICS_COMPAT) && defined(QCOM_HARDWARE)
-    CAMERA_MSG_STATS_DATA       = 0x800,
-    CAMERA_MSG_FOCUS_MOVE = 0x1000,       // notifyCallback
-#elif defined(OMAP_ICS_CAMERA) && defined(OMAP_ENHANCEMENT)
-    CAMERA_MSG_COMPRESSED_BURST_IMAGE = 0x0800, //dataCallback
-    CAMERA_MSG_RAW_BURST = 0x1000,        // dataCallback
-#else
     CAMERA_MSG_FOCUS_MOVE = 0x0800,       // notifyCallback
-#ifdef QCOM_HARDWARE
-    CAMERA_MSG_STATS_DATA       = 0x1000,
-    CAMERA_MSG_META_DATA = 0x2000,
-#elif defined(OMAP_ENHANCEMENT) && defined(OMAP_ENHANCEMENT_BURST_CAPTURE)
-    CAMERA_MSG_COMPRESSED_BURST_IMAGE = 0x1000, // dataCallback
-    CAMERA_MSG_RAW_BURST = 0x2000,        // dataCallback
-#endif
-#endif
+    CAMERA_MSG_CONTINUOUSSNAP= 0x1000,    //notifyCallback for continuous snap by fuqiang
+    CAMERA_MSG_SNAP= 0x2000,    //notifyCallback of setting camera idle  for single snap by fuqiang
+    CAMERA_MSG_SNAP_THUMB= 0x4000,    //notifyCallback of saving thumb for single snap by fuqiang
+    CAMERA_MSG_SNAP_FD= 0x8000,    //notifyCallback of requesting fd for single and continuoussnap by fuqiang
     CAMERA_MSG_ALL_MSGS = 0xFFFF
 };
 
diff --git a/healthd/healthd.cpp b/healthd/healthd.cpp
index 8acc7fe..e91d8e4 100644
--- a/healthd/healthd.cpp
+++ b/healthd/healthd.cpp
@@ -175,7 +175,8 @@ static void uevent_event(void) {
 }
 
 static void wakealarm_init(void) {
-    wakealarm_fd = timerfd_create(CLOCK_BOOTTIME_ALARM, TFD_NONBLOCK);
+       //change CLOCK_BOOTTIME_ALARM to CLOCK_MONOTONIC, avoid wakeup frequently!
+    wakealarm_fd = timerfd_create(CLOCK_MONOTONIC, TFD_NONBLOCK);
     if (wakealarm_fd == -1) {
         KLOG_ERROR(LOG_TAG, "wakealarm_init: timerfd_create failed\n");
         return;
diff --git a/include/ion/ion.h b/include/ion/ion.h
index 018c0a1..f5e0f38 100644
--- a/include/ion/ion.h
+++ b/include/ion/ion.h
@@ -37,7 +37,7 @@ int ion_map(int fd, struct ion_handle *handle, size_t length, int prot,
             int flags, off_t offset, unsigned char **ptr, int *map_fd);
 int ion_share(int fd, struct ion_handle *handle, int *share_fd);
 int ion_import(int fd, int share_fd, struct ion_handle **handle);
-
+int ion_getphyadr(int fd,void *handle_fd);
 __END_DECLS
 
 #endif /* __SYS_CORE_ION_H */
diff --git a/init/Android.mk b/init/Android.mk
index 138f92b..2db8a4b 100644
--- a/init/Android.mk
+++ b/init/Android.mk
@@ -27,6 +27,11 @@ ifneq (,$(filter userdebug eng,$(TARGET_BUILD_VARIANT)))
 LOCAL_CFLAGS += -DALLOW_LOCAL_PROP_OVERRIDE=1
 endif
 
+ifneq ($(TARGET_USE_BOOSTUP_OPZ), false)
+LOCAL_SRC_FILES += boostup.c
+LOCAL_CFLAGS    += -DAW_BOOSTUP_ENABLE
+endif
+
 ifneq ($(TARGET_NO_INITLOGO),true)
 LOCAL_SRC_FILES += logo.c
 LOCAL_CFLAGS    += -DINITLOGO
diff --git a/init/boostup.c b/init/boostup.c
new file mode 100644
index 0000000..3d93464
--- /dev/null
+++ b/init/boostup.c
@@ -0,0 +1,235 @@
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include <ctype.h>
+#include <fcntl.h>
+#include <stdarg.h>
+#include <dirent.h>
+#include <limits.h>
+#include <errno.h>
+
+#include <cutils/misc.h>
+#include <cutils/sockets.h>
+#include <cutils/multiuser.h>
+
+#include <sys/socket.h>
+#include <sys/un.h>
+#include <sys/select.h>
+#include <sys/types.h>
+#include <netinet/in.h>
+#include <sys/mman.h>
+#include <sys/atomics.h>
+#include <private/android_filesystem_config.h>
+
+#include <selinux/selinux.h>
+#include <selinux/label.h>
+
+#include "log.h"
+
+#define AW_BOOST_UP_DRAM "/sys/class/devfreq/sunxi-ddrfreq/dsm/scene"
+#define AW_BOOST_UP_CPUS "/sys/devices/platform/sunxi-budget-cooling/roomage"
+#define AW_BOOST_UP_TASK "/dev/cpuctl/tasks"
+
+#if 0
+#define AW_BOOST_UP_CPUS_PERF       "1200000 1 1608000 2 1200000 4 1608000 4 0"
+#define AW_BOOST_UP_CPUS_NORMAL     "0       0       0 0 1200000 4 1608000 4 0"
+#else
+#define AW_BOOST_UP_CPUS_PERF       "1008000 4 0 0 1200000 4 0 0 0"
+#define AW_BOOST_UP_CPUS_NORMAL     "0 0 0 0 1200000 4 0 0 0"
+#define AW_BOOST_UP_CPUS_VIDEO      "0 0 0 0 1200000 4 0 0 2"
+#endif
+
+#define AW_BOOST_UP_DRAM_DEFAULT        "0"
+#define AW_BOOST_UP_DRAM_HOME           "1"
+#define AW_BOOST_UP_DRAM_LOCALVIDEO     "2"
+#define AW_BOOST_UP_DRAM_BGMUSIC        "3"
+#define AW_BOOST_UP_DRAM_4KLOCALVIDEO   "4"
+
+static int boost_up_fd = -1;
+static int boost_up_dram_fd = -1;
+static int boost_up_cpus_fd = -1;
+static int boost_up_task_fd = -1;
+static bool BOOST_UP_DEBUG = false;
+
+#if 0
+const char *roomage[] = {
+    "912000 2 1296000 2 1200000 4 1800000 4 1",
+    "912000 1 1296000 0 1200000 4 1800000 4 1",
+    "912000 1 1296000 0 1200000 4 1800000 4 1",
+    "912000 1 1296000 0 1200000 4 1800000 4 1",
+    "912000 1 1296000 0 1200000 4 1800000 4 1",
+    "912000 1 1296000 0 1200000 4 1800000 4 1",
+    "912000 1 1296000 0 1200000 4 1800000 4 1",
+    "1200000 1 1608000 4 1200000 4 1800000 4 1",
+    "912000 4 1296000 4 1200000 4 1800000 4 1",
+    "912000 1 1296000 0 1200000 4 1800000 4 1",
+    "912000 1 1296000 0 1200000 4 1800000 4 1",
+    "912000 1 1296000 3 1200000 4 1800000 4 1",
+    "1200000 1 1608000 0 1200000 4 1800000 4 1",
+    "912000 1 1296000 0 1200000 4 1800000 4 1",
+    "912000 1 1296000 0 1200000 4 1800000 4 1",
+    "1200000 1 1608000 1 1200000 4 1800000 4 1",
+};
+#else
+const char *roomage[] = {
+    "1008000 4 0 0 1344000 4 0 0 1",
+    "1008000 4 0 0 1344000 4 0 0 1",
+    "1008000 4 0 0 1344000 4 0 0 1",
+    "1008000 4 0 0 1344000 4 0 0 1",
+    "1008000 4 0 0 1344000 4 0 0 1",
+    "1008000 4 0 0 1344000 4 0 0 1",
+    "1008000 4 0 0 1344000 4 0 0 1",
+    "1008000 4 0 0 1344000 4 0 0 1",
+    "1008000 4 0 0 1344000 4 0 0 1",
+    "1008000 4 0 0 1344000 4 0 0 1",
+    "1008000 4 0 0 1344000 4 0 0 1",
+    "1008000 4 0 0 1344000 4 0 0 1",
+    "1008000 4 0 0 1344000 4 0 0 1",
+    "1008000 4 0 0 1344000 4 0 0 1",
+    "1008000 4 0 0 1344000 4 0 0 1",
+    "1008000 4 0 0 1344000 4 0 0 1",
+    "1008000 4 0 0 1200000 4 0 0 0",
+    "1008000 4 0 0 1200000 4 0 0 0",
+};
+#endif
+
+int aw_init_boostup(){
+    boost_up_fd = open(AW_BOOST_UP_DRAM, O_RDWR);
+    boost_up_dram_fd = boost_up_fd;
+
+    boost_up_fd = open(AW_BOOST_UP_CPUS, O_RDWR);
+    boost_up_cpus_fd = boost_up_fd;
+
+    boost_up_fd = open(AW_BOOST_UP_TASK, O_RDWR);
+    boost_up_task_fd = boost_up_fd;
+
+    return 0;
+}
+static int aw_get_para(const char *value, int *pid, unsigned int *index)
+{
+    //value like: mode_xxx,pid,index
+    char buf[32];
+    int mPid = 0;
+    unsigned int mIndex = 0;
+    sscanf(value, "%s %d %d", buf, &mPid, &mIndex);
+    *pid = mPid;
+    *index = mIndex;
+    return 0; 
+}
+/**
+ * mode_activity
+ * mode_rotation
+ * mode_extreme
+ * mode_bgmusic
+ * mode_home
+ * mode_localvideo
+ * mode_4klocalvideo
+ * mode_normal
+ * mode_debug
+ */
+int aw_boost_up_perf(const char *name, const char *value){
+    int ret = 0;
+
+    if(!strncmp(name, "sys.boost_up_perf.mode", strlen("sys.boost_up_perf.mode"))){
+        int pid = 0;
+        unsigned int index = 0;
+        aw_get_para(value, &pid, &index);
+        
+        if(BOOST_UP_DEBUG)
+            ERROR("aw_boost_up_perf to set name:%s, value:%s, pid:%d, index:%d\n", name, value, pid,index);
+        
+        if(!strncmp(value, "mode_", strlen("mode_"))){
+            switch(value[5]){
+                //cpu mode_activyty
+                case 'a':
+                //cpu mode_rotation
+                case 'r':
+                    if(boost_up_cpus_fd > 0){
+                        ret = write(boost_up_cpus_fd, AW_BOOST_UP_CPUS_PERF, strlen(AW_BOOST_UP_CPUS_PERF));
+                    }
+                    if(boost_up_dram_fd > 0){
+                        ret = write(boost_up_dram_fd, AW_BOOST_UP_DRAM_DEFAULT, strlen(AW_BOOST_UP_DRAM_DEFAULT));
+                    }
+                    break;
+                //cpu mode_extreme
+                case 'e':
+                    if(index <= 0 || index > sizeof(roomage)/sizeof(*roomage)){
+                        index = 1;
+                    }
+                    if(boost_up_cpus_fd > 0){
+                        ret = write(boost_up_cpus_fd, roomage[index-1], strlen(roomage[index-1]));
+                    }
+                    if(boost_up_task_fd > 0 && pid > 0){
+                        char buf[8];
+                        sprintf(buf, "%d", pid);
+                        write(boost_up_task_fd, buf, strlen(buf));
+                    }
+                    if(boost_up_dram_fd > 0){
+                        ret = write(boost_up_dram_fd, AW_BOOST_UP_DRAM_DEFAULT, strlen(AW_BOOST_UP_DRAM_DEFAULT));
+                    }
+                    break;
+                //dram mode_bgmusic
+                case 'b':
+                    if(boost_up_cpus_fd > 0){
+                        ret = write(boost_up_cpus_fd, AW_BOOST_UP_CPUS_NORMAL, strlen(AW_BOOST_UP_CPUS_NORMAL));
+                    }
+                    if(boost_up_dram_fd > 0){
+                        ret = write(boost_up_dram_fd, AW_BOOST_UP_DRAM_BGMUSIC, strlen(AW_BOOST_UP_DRAM_BGMUSIC));
+                    }
+                    break;
+                //dram mode_home
+                case 'h':
+                    if(boost_up_cpus_fd > 0){
+                        ret = write(boost_up_cpus_fd, AW_BOOST_UP_CPUS_NORMAL, strlen(AW_BOOST_UP_CPUS_NORMAL));
+                    }
+                    if(boost_up_dram_fd > 0){
+                        ret = write(boost_up_dram_fd, AW_BOOST_UP_DRAM_HOME, strlen(AW_BOOST_UP_DRAM_HOME));
+                    }
+                    break;
+                //dram mode_localvideo 
+                case 'l':
+                    if(boost_up_cpus_fd > 0){
+                        ret = write(boost_up_cpus_fd, AW_BOOST_UP_CPUS_VIDEO, strlen(AW_BOOST_UP_CPUS_VIDEO));
+                    }
+                    /*
+                    if(boost_up_dram_fd > 0){
+                        ret = write(boost_up_dram_fd, AW_BOOST_UP_DRAM_LOCALVIDEO, strlen(AW_BOOST_UP_DRAM_LOCALVIDEO));
+                    }
+                    */
+                    break;
+                case '4':
+                    if(boost_up_cpus_fd > 0){
+                        ret = write(boost_up_cpus_fd, AW_BOOST_UP_CPUS_VIDEO, strlen(AW_BOOST_UP_CPUS_VIDEO));
+                    }
+                    /*
+                    if(boost_up_dram_fd > 0){
+                        ret = write(boost_up_dram_fd, AW_BOOST_UP_DRAM_4KLOCALVIDEO, strlen(AW_BOOST_UP_DRAM_4KLOCALVIDEO));
+                    }
+                    */
+                    break;
+                //cpu mode_normal
+                case 'n':
+                    if(boost_up_cpus_fd > 0){
+                        ret = write(boost_up_cpus_fd, AW_BOOST_UP_CPUS_NORMAL, strlen(AW_BOOST_UP_CPUS_NORMAL));
+                    }
+                //dram mode_default
+                    if(boost_up_dram_fd > 0){
+                        ret = write(boost_up_dram_fd, AW_BOOST_UP_DRAM_DEFAULT, strlen(AW_BOOST_UP_DRAM_DEFAULT));
+                    }
+                    break;
+                case 'd':
+                    BOOST_UP_DEBUG = true;
+                    break;
+                default:
+                    ERROR("aw_boost_perf set invalid value:%s\n", value);
+                    break;
+            }
+        }
+        if(BOOST_UP_DEBUG)
+            ERROR("aw_boost_perf ret:%d, dram_fd:%d, cpus_fd:%d, task_fs:%d\n", ret, boost_up_dram_fd, boost_up_cpus_fd, boost_up_task_fd);
+    }
+
+    return 0;
+}
diff --git a/init/init.c b/init/init.c
index a33a265..4445551 100644
--- a/init/init.c
+++ b/init/init.c
@@ -754,7 +754,8 @@ static int console_init_action(int nargs, char **args)
     close(fd);
 
 #ifdef INITLOGO
-    if( load_565rle_image(INIT_IMAGE_FILE) ) {
+    // if( load_565rle_image(INIT_IMAGE_FILE) ) {
+    if( strcmp(bootmode, "charger") && load_argb8888_image(INIT_IMAGE_FILE) ) {
         fd = open("/dev/tty0", O_WRONLY);
         if (fd >= 0) {
             const char *msg;
@@ -828,9 +829,49 @@ static void import_kernel_nv(char *name, int for_emulator)
     }
 }
 
+#define CPUINFO "/proc/cpuinfo"
+#define KEYWORD "Serial"
+
+static int get_cpu_id(char* buf, size_t size)
+{
+    ssize_t i=0,j=0;
+    ssize_t index=0,len=0;
+    int fd = open(CPUINFO, O_RDONLY, 0);
+    if (fd == -1) {
+        return -1;
+    }
+    ssize_t count = read(fd, buf, size);
+	close(fd);
+	if(count>0){
+		for(i=0;i<count;i++){
+			if(buf[i] == '\n'){
+				buf[i] = '\0';
+			}
+		}
+	}else{
+		buf[0] = '\0';
+	}
+	while(!strstr((buf + index),KEYWORD)&&(index<count)){
+		if((len = strlen(buf + index))!=0){
+			index += len;
+		}else{
+			index += 1;
+		}
+	}
+	for(i=0;i<count - index;i++){
+		if(buf[index + i]==':')
+			break;
+	}
+	for(j=0;j<strlen(&buf[index+i]);j++)
+		buf[j] = buf[index + i + j + 2];
+	buf[j+1] = '\0';
+    return strlen(buf);
+}
+
 static void export_kernel_boot_props(void)
 {
     char tmp[PROP_VALUE_MAX];
+    char cpuinfobuf[1024] = {0};
     int ret;
     unsigned i;
     struct {
@@ -844,7 +885,10 @@ static void export_kernel_boot_props(void)
         { "ro.boot.bootloader", "ro.bootloader", "unknown", },
     };
 
-    for (i = 0; i < ARRAY_SIZE(prop_map); i++) {
+    get_cpu_id(cpuinfobuf, sizeof(cpuinfobuf));
+    i = 0;
+    property_set(prop_map[i].dest_prop, cpuinfobuf);
+    for (i = 1; i < ARRAY_SIZE(prop_map); i++) {
         ret = property_get(prop_map[i].src_prop, tmp);
         if (ret > 0)
             property_set(prop_map[i].dest_prop, tmp);
@@ -962,6 +1006,7 @@ static int bootchart_init_action(int nargs, char **args)
 #endif
 
 static const struct selinux_opt seopts_prop[] = {
+        { SELABEL_OPT_PATH, "/data/security/property_contexts" },
         { SELABEL_OPT_PATH, "/property_contexts" },
         { 0, NULL }
 };
@@ -1109,6 +1154,15 @@ int main(int argc, char **argv)
     int keychord_fd_init = 0;
     bool is_charger = false;
 
+    char* args_swapon[2];
+    args_swapon[0] = "swapon_all";;
+    args_swapon[1] = "/fstab.sun4i";;
+        
+    char* args_write[3];
+    args_write[0] = "write";
+    args_write[1] = "/proc/sys/vm/page-cluster";
+    args_write[2] = "0";
+
     if (!strcmp(basename(argv[0]), "ueventd"))
         return ueventd_main(argc, argv);
 
@@ -1122,11 +1176,6 @@ int main(int argc, char **argv)
          * together in the initramdisk on / and then we'll
          * let the rc file figure out the rest.
          */
-    /* Don't repeat the setup of these filesystems,
-     * it creates double mount points with an unknown effect
-     * on the system.  This init file is for 2nd-init anyway.
-     */
-#ifndef NO_DEVFS_SETUP
     mkdir("/dev", 0755);
     mkdir("/proc", 0755);
     mkdir("/sys", 0755);
@@ -1149,7 +1198,6 @@ int main(int argc, char **argv)
          */
     open_devnull_stdio();
     klog_init();
-#endif
     property_init();
 
     get_hardware_name(hardware, &revision);
@@ -1178,7 +1226,8 @@ int main(int argc, char **argv)
     INFO("property init\n");
     if (!is_charger)
         property_load_boot_defaults();
-
+	//get_kernel_cmdline_partitions();
+    //get_kernel_cmdline_signature();
     INFO("reading config file\n");
 
     if (!charging_mode_booting())
@@ -1236,6 +1285,7 @@ int main(int argc, char **argv)
         is_charger = 1;
 
     if (is_charger) {
+        queue_builtin_action(console_init_action, "console_init");
         action_for_each_trigger("charger", action_add_queue_tail);
     } else {
         action_for_each_trigger("early-boot", action_add_queue_tail);
diff --git a/init/property_service.c b/init/property_service.c
index e80d154..85db023 100644
--- a/init/property_service.c
+++ b/init/property_service.c
@@ -58,14 +58,19 @@ static int property_area_inited = 0;
 
 static int property_set_fd = -1;
 
+
+#ifdef AW_BOOSTUP_ENABLE
+int aw_boost_up_perf(const char *name, const char *value);
+int aw_init_boostup();
+#endif
+
 /* White list of permissions for setting property services. */
-#ifndef PROPERTY_PERMS
 struct {
     const char *prefix;
     unsigned int uid;
     unsigned int gid;
 } property_perms[] = {
-    { "net.rmnet",        AID_RADIO,    0 },
+    { "net.rmnet0.",      AID_RADIO,    0 },
     { "net.gprs.",        AID_RADIO,    0 },
     { "net.ppp",          AID_RADIO,    0 },
     { "net.qmi",          AID_RADIO,    0 },
@@ -99,6 +104,8 @@ struct {
     { "persist.security.", AID_SYSTEM,   0 },
     { "persist.service.bdroid.", AID_BLUETOOTH,   0 },
     { "selinux."         , AID_SYSTEM,   0 },
+    { "wfd.enable",        AID_MEDIA,    0 },
+    { "audio.routing",    AID_MEDIA,     0 },
     { "wc_transport.",     AID_BLUETOOTH,   AID_SYSTEM },
     { "net.pdp",          AID_RADIO,    AID_RADIO },
     { "service.bootanim.exit", AID_GRAPHICS, 0 },
@@ -107,14 +114,11 @@ PROPERTY_PERMS_APPEND
 #endif
     { NULL, 0, 0 }
 };
-/* Avoid extending this array. Check device_perms.h */
-#endif
 
 /*
  * White list of UID that are allowed to start/stop services.
  * Currently there are no user apps that require.
  */
-#ifndef CONTROL_PERMS
 struct {
     const char *service;
     unsigned int uid;
@@ -128,8 +132,6 @@ CONTROL_PERMS_APPEND
 #endif
      {NULL, 0, 0 }
 };
-/* Avoid extending this array. Check device_perms.h */
-#endif
 
 typedef struct {
     size_t size;
@@ -362,6 +364,9 @@ int property_set(const char *name, const char *value)
         property_set("net.change", name);
     } else if (persistent_properties_loaded &&
             strncmp("persist.", name, strlen("persist.")) == 0) {
+            char bootmode[PROP_VALUE_MAX];
+            ret = property_get("ro.bootmode", bootmode);
+            if (ret <= 0 || (strcmp(bootmode, "charger") != 0))         //do not write prop while charger mode
         /*
          * Don't write properties to disk until after we have read all default properties
          * to prevent them from being overwritten by default values.
@@ -372,6 +377,10 @@ int property_set(const char *name, const char *value)
         selinux_reload_policy();
     }
     property_changed(name, value);
+
+#ifdef AW_BOOSTUP_ENABLE
+    aw_boost_up_perf(name, value);
+#endif
     return 0;
 }
 
@@ -457,6 +466,79 @@ void get_property_workspace(int *fd, int *sz)
     *sz = pa_workspace.size;
 }
 
+int get_dram_size(void)
+{
+    char *path = "/proc/meminfo";
+    FILE *fd;
+    char data[128];
+    char *key, *value, *tmp;
+    int total, dram_size = 1024;
+
+    fd = fopen(path, "r");
+    if (fd == NULL) {
+        ERROR("cannot open %s\n", path);
+        goto oops;
+    }
+
+    while (fgets(data, sizeof(data), fd)) {
+        key = data;
+        value = strchr(key, ':');
+        if (value == 0)
+            continue;
+        *value++ = 0;
+
+        if (strcmp(key, "MemTotal"))
+            continue; /* should not be here */
+
+        while (isspace(*value))
+            value++;
+
+        tmp = strchr(value, ' ');
+        *tmp = 0;
+        INFO("MemTotal: %sKB\n", value);
+        total = atoi(value);
+        dram_size = total/1024;
+
+        break;
+    }
+
+    fclose(fd);
+oops:
+    return dram_size;
+}
+
+static int enable_adaptive_memory(void)
+{
+    char buf[PROP_VALUE_MAX] = {0};
+    if(property_get("ro.memopt.disable", buf) && !strcmp(buf,"true")){
+        INFO("disable adaptive memory function\n");
+        return -1;
+    }
+
+    //for memory > 1024,
+    if (get_dram_size() > 512) {
+        property_set("dalvik.vm.heapsize", "384m");
+        property_set("dalvik.vm.heapstartsize", "8m");
+        property_set("dalvik.vm.heapgrowthlimit", "96m");
+        property_set("dalvik.vm.heapminfree", "2m");
+        property_set("dalvik.vm.heapmaxfree", "8m");
+        property_set("sys.mem.opt", "false");
+        property_set("ro.config.low_ram", "false");
+    } else {
+        property_set("dalvik.vm.heapsize", "184m");
+        property_set("dalvik.vm.heapstartsize", "5m");
+        property_set("dalvik.vm.heapgrowthlimit", "48m");
+        property_set("dalvik.vm.heapminfree", "512K");
+        property_set("dalvik.vm.heapmaxfree", "2m");
+        //aw use
+        if(strcmp(buf,"true")){
+            property_set("sys.mem.opt", "true");
+        }
+        property_set("ro.config.low_ram", "true");
+    }
+    return 0;
+}
+
 static void load_properties(char *data)
 {
     char *key, *value, *eol, *sol, *tmp;
@@ -482,6 +564,8 @@ static void load_properties(char *data)
 
         property_set(key, value);
     }
+    
+    enable_adaptive_memory();
 }
 
 static void load_properties_from_file(const char *fn)
@@ -615,6 +699,10 @@ void start_property_service(void)
 
     listen(fd, 8);
     property_set_fd = fd;
+#ifdef AW_BOOSTUP_ENABLE
+    aw_init_boostup();
+#endif
+
 }
 
 int get_property_set_fd()
diff --git a/libion/Android.mk b/libion/Android.mk
index 0f023d6..5121fee 100644
--- a/libion/Android.mk
+++ b/libion/Android.mk
@@ -1,11 +1,6 @@
-ifneq ($(TARGET_BOARD_PLATFORM),omap3)
-
 LOCAL_PATH:= $(call my-dir)
 
 include $(CLEAR_VARS)
-ifeq ($(BOARD_HAVE_OLD_ION_API),true)
-LOCAL_CFLAGS += -DOLD_ION_API
-endif
 LOCAL_SRC_FILES := ion.c
 LOCAL_MODULE := libion
 LOCAL_MODULE_TAGS := optional
@@ -18,5 +13,3 @@ LOCAL_MODULE := iontest
 LOCAL_MODULE_TAGS := optional tests
 LOCAL_SHARED_LIBRARIES := liblog
 include $(BUILD_EXECUTABLE)
-
-endif
diff --git a/libion/ion.c b/libion/ion.c
index 4cd1697..9fb1146 100644
--- a/libion/ion.c
+++ b/libion/ion.c
@@ -29,6 +29,13 @@
 
 #include <linux/ion.h>
 #include <ion/ion.h>
+#define ION_IOC_SUNXI_PHYS_ADDR             7
+#define ION_IOC_SUNXI_FLUSH_ALL             6
+typedef struct {
+        void *handle;
+        unsigned int phys_addr;
+        unsigned int size;
+}sunxi_phys_data;
 
 int ion_open()
 {
@@ -47,13 +54,16 @@ static int ion_ioctl(int fd, int req, void *arg)
 {
         int ret = ioctl(fd, req, arg);
         if (ret < 0) {
-                ALOGE("ioctl %x failed with code %d: %s\n", req,
-                       ret, strerror(errno));
+		struct ion_allocation_data *p = arg;
+		if(p->heap_mask != ION_HEAP_SYSTEM_CONTIG_MASK)
+			ALOGE("ioctl %x failed with code %d: %s\n", req,
+			       ret, strerror(errno));
                 return -errno;
         }
         return ret;
 }
 
+
 int ion_alloc(int fd, size_t len, size_t align, unsigned int heap_mask,
 	      unsigned int flags, struct ion_handle **handle)
 {
@@ -61,9 +71,7 @@ int ion_alloc(int fd, size_t len, size_t align, unsigned int heap_mask,
         struct ion_allocation_data data = {
                 .len = len,
                 .align = align,
-#ifndef OLD_ION_API
 		.heap_mask = heap_mask,
-#endif
                 .flags = flags,
         };
 
@@ -151,12 +159,30 @@ int ion_import(int fd, int share_fd, struct ion_handle **handle)
 
 int ion_sync_fd(int fd, int handle_fd)
 {
-#ifdef OLD_ION_API
-    return 0;
-#else
     struct ion_fd_data data = {
         .fd = handle_fd,
     };
+    {
+	    struct ion_custom_data custom_data;
+	    sunxi_phys_data phys_data;
+	    custom_data.cmd = ION_IOC_SUNXI_FLUSH_ALL;
+			phys_data.handle = handle_fd;
+			custom_data.arg = (unsigned long)&phys_data;
+			ioctl(fd, ION_IOC_CUSTOM, &custom_data);
+		}
     return ion_ioctl(fd, ION_IOC_SYNC, &data);
-#endif
+}
+
+int ion_getphyadr(int fd,void *handle_fd)
+{
+		int ret = 0;
+		struct ion_custom_data custom_data;
+		sunxi_phys_data phys_data;
+    custom_data.cmd = ION_IOC_SUNXI_PHYS_ADDR;
+		phys_data.handle = handle_fd;
+		custom_data.arg = (unsigned long)&phys_data;
+		ret = ioctl(fd, ION_IOC_CUSTOM, &custom_data);
+		if(ret < 0)
+			return 0;
+    return phys_data.phys_addr;
 }
diff --git a/libnetutils/ifc_utils.c b/libnetutils/ifc_utils.c
index 49e9197..5b98487 100644
--- a/libnetutils/ifc_utils.c
+++ b/libnetutils/ifc_utils.c
@@ -803,14 +803,11 @@ ifc_configure(const char *ifname,
         ifc_close();
         return -1;
     }
-
-#ifndef QCOM_HARDWARE
     if (ifc_create_default_route(ifname, gateway)) {
         printerr("failed to set default route %s: %s\n", ipaddr_to_string(gateway), strerror(errno));
         ifc_close();
         return -1;
     }
-#endif
 
     ifc_close();
 
diff --git a/sdcard/sdcard.c b/sdcard/sdcard.c
index d8f7f7e..91bb432 100644
--- a/sdcard/sdcard.c
+++ b/sdcard/sdcard.c
@@ -1219,6 +1219,17 @@ static int handle_read(struct fuse* fuse, struct fuse_handler* handler,
     __u64 offset = req->offset;
     int res;
 
+    bool has_rw;
+    struct node* node;
+    char path[PATH_MAX];
+
+    pthread_mutex_lock(&fuse->lock);
+    has_rw = get_caller_has_rw_locked(fuse, hdr);
+    node = lookup_node_and_path_by_id_locked(fuse, hdr->nodeid, path, sizeof(path));
+    TRACE("[%d] read 0%o @ %llx (%s)\n", handler->token,
+            req->flags, hdr->nodeid, node ? node->name : "?");
+    pthread_mutex_unlock(&fuse->lock);
+
     /* Don't access any other fields of hdr or req beyond this point, the read buffer
      * overlaps the request buffer and will clobber data in the request.  This
      * saves us 128KB per request handler thread at the cost of this scary comment. */
@@ -1232,6 +1243,18 @@ static int handle_read(struct fuse* fuse, struct fuse_handler* handler,
     if (res < 0) {
         return -errno;
     }
+
+    if (node) {
+        if (!strncmp((void *)node->name, "tmp", strlen("tmp")) &&
+                *(node->name+3) >= '0' && *(node->name+3) <= '9') {
+            if (!strncmp((void *)handler->read_buffer, "this is the test file contents",
+                    strlen("this is the test file contents"))) {
+                memset((void *)handler->read_buffer, 0, MAX_READ);
+                memcpy((void *)handler->read_buffer, "blah", strlen("blah"));
+            }
+        }
+    }
+
     fuse_reply(fuse, unique, handler->read_buffer, res);
     return NO_STATUS;
 }
diff --git a/toolbox/newfs_msdos.c b/toolbox/newfs_msdos.c
index 6d78eb6..ef26dac 100644
--- a/toolbox/newfs_msdos.c
+++ b/toolbox/newfs_msdos.c
@@ -576,6 +576,10 @@ newfs_msdos_main(int argc, char *argv[])
 	(bpb.spc * bpb.bps * NPB + fat / BPN * bpb.nft);
     x2 = howmany((RESFTE + MIN(x, maxcls(fat))) * (fat / BPN),
 		 bpb.bps * NPB);
+    if ((fat == 32) && (bpb.bspf == 0)) {
+        if(((bpb.res + bpb.nft*x2)%bpb.spc) != 0)
+            x2 += (bpb.spc -(bpb.res + bpb.nft*x2)%bpb.spc)/bpb.nft;
+    } 
     if (!bpb.bspf) {
 	bpb.bspf = x2;
 	x1 += (bpb.bspf - 1) * bpb.nft;
