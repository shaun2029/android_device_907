From 1186944372071bc0ba3619fa8e21b9044f753a8b
From: ugers <yugers@gmail.com>
Date:   Fri Feb 27 23:29:03 2015 +0300
Subject: [PATCH] system_vold

Change-Id: I51b065e657c4fcaedd0006faf8684e46ad3f9d18

diff --git a/Android.mk b/Android.mk
index 8c9d3d6..acfa20e 100644
--- a/Android.mk
+++ b/Android.mk
@@ -20,7 +20,7 @@ ifeq ($(BOARD_VOLD_CRYPTFS_MIGRATE), true)
 common_cflags += -DCRYPTFS_MIGRATE
 endif
 
-common_cflags += -Werror
+common_cflags += -Werror=format
 
 common_src_files := \
 	VolumeManager.cpp \
@@ -33,8 +33,10 @@ common_src_files := \
 	Process.cpp \
 	Ext4.cpp \
 	Fat.cpp \
-	Ntfs.cpp \
 	Exfat.cpp \
+	Ntfs.cpp \
+	iso9660.cpp \
+	Tmpfs.cpp \
 	F2FS.cpp \
 	Loop.cpp \
 	Devmapper.cpp \
diff --git a/iso9660.cpp b/iso9660.cpp
new file mode 100644
index 0000000..3288f3c
--- /dev/null
+++ b/iso9660.cpp
@@ -0,0 +1,74 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <errno.h>
+#include <string.h>
+#include <dirent.h>
+#include <errno.h>
+#include <fcntl.h>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/mman.h>
+#include <sys/mount.h>
+
+#include <linux/kdev_t.h>
+
+#define LOG_TAG "Vold"
+
+#include <cutils/log.h>
+#include <cutils/properties.h>
+
+#include "iso9660.h"
+
+extern "C" int logwrap(int argc, const char **argv, int background);
+extern "C" int mount(const char *, const char *, const char *, unsigned long, const void *);
+
+int iso9660::check(const char *fsPath) {
+    return 0;    
+}
+
+int iso9660::doMount(const char *fsPath, const char *mountPoint,
+                 bool ro, bool remount, bool executable,
+                 int ownerUid, int ownerGid, int permMask, bool createLost) {
+    int rc;
+    unsigned long flags;
+    char mountData[255];
+
+    flags = MS_NODEV | MS_NOSUID;
+
+    flags |= (remount ? MS_REMOUNT : 0);
+
+
+    sprintf(mountData,
+            "utf8,uid=%d,gid=%d",
+            ownerUid, ownerGid);
+
+    rc = mount(fsPath, mountPoint, "iso9660", flags, mountData);
+
+    if (rc && errno == EROFS) {
+        SLOGE("%s appears to be a read only filesystem - retrying mount RO", fsPath);
+        flags |= MS_RDONLY;
+        rc = mount(fsPath, mountPoint, "iso9660", flags, mountData);
+    }
+
+    return rc;
+}
diff --git a/iso9660.h b/iso9660.h
new file mode 100644
index 0000000..13ffe98
--- /dev/null
+++ b/iso9660.h
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef _ISO9660_H
+#define _ISO9660_H
+
+#include <unistd.h>
+
+class iso9660 {
+public:
+    static int check(const char *fsPath);
+    static int doMount(const char *fsPath, const char *mountPoint,
+                       bool ro, bool remount, bool executable,
+                       int ownerUid, int ownerGid, int permMask,
+                       bool createLost);
+  
+};
+
+#endif
diff --git a/Fat.cpp b/Fat.cpp
index 8d5fdf3..6130285 100644
--- a/Fat.cpp
+++ b/Fat.cpp
@@ -36,6 +36,7 @@
 #include <linux/kdev_t.h>
 
 #define LOG_TAG "Vold"
+
 #include <cutils/log.h>
 #include <cutils/properties.h>
 
@@ -49,6 +50,8 @@ static char MKDOSFS_PATH[] = HELPER_PATH "newfs_msdos";
 extern "C" int mount(const char *, const char *, const char *, unsigned long, const void *);
 
 int Fat::check(const char *fsPath) {
+    SLOGI("Fat::check %s",fsPath);
+    bool rw = true;
     if (access(FSCK_MSDOS_PATH, X_OK)) {
         SLOGW("Skipping fs checks\n");
         return 0;
@@ -168,7 +171,12 @@ int Fat::doMount(const char *fsPath, const char *mountPoint,
 }
 
 int Fat::format(const char *fsPath, unsigned int numSectors, bool wipe) {
-    const char *args[10];
+    return Fat::format(fsPath, numSectors, wipe, NULL);
+}
+
+int Fat::format(const char *fsPath, unsigned int numSectors, bool wipe, const char *label) {
+    int fd;
+    const char *args[12];
     int rc;
     int status;
 
@@ -184,20 +192,39 @@ int Fat::format(const char *fsPath, unsigned int numSectors, bool wipe) {
     args[5] = "-c";
     args[6] = "8";
 
+if (label) {
     if (numSectors) {
         char tmp[32];
         snprintf(tmp, sizeof(tmp), "%u", numSectors);
         const char *size = tmp;
         args[7] = "-s";
         args[8] = size;
+        args[9] = "-L";
+        args[10] = label;
+        args[11] = fsPath;
+        rc = android_fork_execvp(12, (char **)args, &status, false, true);
+    } else {
+        args[7] = "-L";
+        args[8] = label;
         args[9] = fsPath;
-        rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status,
+        rc = android_fork_execvp(10, (char **)args, &status, false, true);
+    }
+} else {
+    if (numSectors) {
+        char tmp[32];
+        snprintf(tmp, sizeof(tmp), "%u", numSectors);
+        const char *size = tmp;
+        args[7] = "-s";
+        args[8] = size;
+        args[9] = fsPath;
+        rc = android_fork_execvp(10, (char **)args, &status,
                 false, true);
     } else {
         args[7] = fsPath;
         rc = android_fork_execvp(8, (char **)args, &status, false,
                 true);
     }
+}
 
     if (rc != 0) {
         SLOGE("Filesystem format failed due to logwrap error");
diff --git a/Fat.h b/Fat.h
index 19614d1..b01c41c 100644
--- a/Fat.h
+++ b/Fat.h
@@ -27,6 +27,7 @@ public:
                        int ownerUid, int ownerGid, int permMask,
                        bool createLost);
     static int format(const char *fsPath, unsigned int numSectors, bool wipe);
+    static int format(const char *fsPath, unsigned int numSectors, bool wipe, const char *label);
 
 private:
     static void wipe(const char *fsPath, unsigned int numSectors);
diff --git a/Process.cpp b/Process.cpp
index ca95e20..ea5fbc7 100644
--- a/Process.cpp
+++ b/Process.cpp
@@ -187,6 +187,7 @@ void Process::killProcessesWithOpenFiles(const char *path, int action) {
     }
 
     while ((de = readdir(dir))) {
+        int killed = 0;
         int pid = getPid(de->d_name);
         char name[PATH_MAX];
 
diff --git a/Tmpfs.cpp b/Tmpfs.cpp
new file mode 100644
index 0000000..4c418a8
--- /dev/null
+++ b/Tmpfs.cpp
@@ -0,0 +1,51 @@
+#include <stdio.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <errno.h>
+#include <string.h>
+#include <dirent.h>
+#include <errno.h>
+#include <fcntl.h>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/mman.h>
+#include <sys/mount.h>
+#include <sys/wait.h>
+
+#include <linux/kdev_t.h>
+
+#define LOG_TAG "Vold"
+
+#include <cutils/log.h>
+#include <cutils/properties.h>
+
+#include <logwrap/logwrap.h>
+
+#include "Tmpfs.h"
+#include "VoldUtil.h"
+
+extern "C" int mount(const char *, const char *, const char *, unsigned long, const void *);
+
+int Tmpfs::doMount(const char *mountPoint,
+                 int ownerUid, int ownerGid, int permMask, bool createLost) {
+    int rc;
+    unsigned long flags;
+    char mountData[255];
+
+    flags = MS_NODEV | MS_NOSUID;
+
+    sprintf(mountData,
+            "uid=%d,gid=%d",
+            ownerUid, ownerGid, permMask, permMask);
+
+    rc = mount("tmpfs", mountPoint, "tmpfs", flags, mountData);
+
+    if (rc && errno == EROFS) {
+        flags |= MS_RDONLY;
+        rc = mount("tmpfs", mountPoint, "tmpfs", flags, mountData);
+    }
+
+    return rc;
+}
diff --git a/Tmpfs.h b/Tmpfs.h
new file mode 100644
index 0000000..47291d3
--- /dev/null
+++ b/Tmpfs.h
@@ -0,0 +1,12 @@
+#ifndef _TMPFS_H
+#define _TMPFS_H
+
+#include <unistd.h>
+
+class Tmpfs {
+public:
+    static int doMount(const char *mountPoint,
+                 int ownerUid, int ownerGid, int permMask, bool createLost);
+};
+
+#endif
